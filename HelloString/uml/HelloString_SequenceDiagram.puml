###########################################################
@startuml HelloString.png

Title HelloString Service Start
'----------------------------------------------------------
'==========================================================

@startuml
Title HelloString Service
'''''''''''' Server
group #LightBlue Server Start
box "Server Service" #LightBlue
participant GenCodeService
participant HelloHal
participant GenCodeController
end box
== Server ==
GenCodeService -> GenCodeService : MainLoop::create() : RefPtr<MainLoop>
activate GenCodeService
GenCodeService -> GenCodeService : startService() : bool

group #LightBlue hal dbusConnection
GenCodeService -> GenCodeService : halOpen() : bool
activate HelloHal
GenCodeService -> HelloHal : dlopen(const char*, int) : void*
HelloHal -> GenCodeService : handle : void*
GenCodeService -> HelloHal : dlsym(void*, const char*) : void*
HelloHal -> GenCodeService : mHal : IHelloHal*
end group

alt #LightBlue Hal Open Successful Case

group #LightBlue dbus connection & hal object relay
GenCodeService -> GenCodeController : init(mHal)
activate GenCodeController
GenCodeController -> GenCodeController : dbusAdd(dbusType, dbusName, ...)
end group

GenCodeService -> GenCodeController : startService() : bool
GenCodeService -> GenCodeController : getStub() : GenCodeController*
GenCodeService -> HelloHal : setTimeListener(IHelloListener *listener)

group #LightBlue loop that emits a signal every 10 seconds
HelloHal -> HelloHal : onEvent(std::string&, int)
HelloHal -> GenCodeController : eventEmit(std::string, int)
end group

else Hal Open failure Case
GenCodeService ->[ : return
deactivate GenCodeService
end

GenCodeService-[hidden]->GenCodeService
activate GenCodeService

end group
'''''''''''' Server

'''''''''''' Client A
== Client A ==
group #MistyRose Client A Start
box "Client A Service" #MistyRose
participant GenCodeProxy_A
participant MyClass
end box

MyClass -> MyClass : MainLoop::create() : RefPtr<MainLoop>
activate MyClass
group #MistyRose dbus connection
GenCodeProxy_A -> GenCodeProxy_A : dbusConnection(dbusType, dbusName, ...)
activate GenCodeProxy_A
end group

group #MistyRose If you send a message from qml
MyClass -> GenCodeProxy_A : MessageMethod_sync(const std::string, pid)
GenCodeProxy_A -> GenCodeController : MessageMethod(std::string s, pid)
GenCodeController -> GenCodeProxy_A : receiveMessageForClient(std::string s)
GenCodeProxy_A -> MyClass : getStr() : QString
MyClass -> MyClass : print message to qml
end group

group #MistyRose loop signal every 10 seconds
GenCodeController -> GenCodeProxy_A : receiveTimeOccure(std::string, int)
GenCodeProxy_A -> MyClass : getCount() : int
MyClass -> MyClass : print loop Count to qml
end group
end group
'''''''''''' Client A

'''''''''''' Client B
== Client B ==
group #LightGreen Client B Start

box "Client B Service" #LightGreen
participant GenCodeProxy_B
end box

GenCodeProxy_B -> GenCodeProxy_B : MainLoop::create() : RefPtr<MainLoop>
activate GenCodeProxy_B
group #LightGreen dbus connection
GenCodeProxy_B -> GenCodeProxy_B : dbusConnection(dbusType, dbusName, ...)
end group

group #LightGreen When client A sends a message
GenCodeController -> GenCodeProxy_B : receiveMessageForClient(std::string s)
GenCodeProxy_B -> GenCodeProxy_B : output the received message
end group

group #LightGreen loop signal every 10 seconds
GenCodeController -> GenCodeProxy_B : receiveTimeOccure(std::string, int)
GenCodeProxy_B -> GenCodeProxy_B : output the received loop Count
end group

end group
'''''''''''' Client B
'''''''''''' ~ HelloString Service
@enduml